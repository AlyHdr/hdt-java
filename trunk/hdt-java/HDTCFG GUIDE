This document explains the available options of a hdtcfg configuration file which is used when
a HDT file is constructed from an RDF file (i.e. when running the RDF2HDT tool)

1) Parameters of the RDF input file:
	
	- "rdf.lines":	- NOT NECESSARY and USELESS if tempTriples.type = on-disc; HIGHLY RECOMMENDED if tempTriples.type = in-memory
					- should hold the number of triples (or an upper approximation, so bigger OK, smaller VERY BAD) in the RDF file
					- this information is used for the precise allocation of the in-memory temporary triples structure,
					and for calculating the size of dictionary cache if in-memory temporary triples are used
					- if not given and in-memory triples are used it WILL BE counted !!! (meaning RDF parsed once just for that -> very lengthy)
					- if counting of triples wants to be avoided and an estimation used instead (if memory is not an issue but performance is)
					then this should be	set to 0 or any negative value
	
	- "rdf.expectedCompression":	- used for calculating the amount of memory available for caching (for on-disc implementations)
									- should hold the size of resulting HDT file in percent/100 of the original RDF file
									- if not set 0.15(15%) will be assumed
									- if memory is critical try to set this number low (lesser it is means
									lesser assumption of minimal reuqired memory)

2) Parameters of the HDT output file:

	- "loader.type":	- can be "two-pass" or "one-pass"
						- "two-pass" means RDF file will be parsed twice - first for dictionary, then for triples
						- "one-pass" means RDF file will be parsed only once and triples reorganised in memory
						- if not set "two-pass" will be assumed

3) Parameters of the temporary dictionary:

	- "tempDictionary.type":	- can be "on-disc" or "in-memory", if neither or not set "in-memory" "hash" implementation will be used
	
	- "tempDictionary.impl":	- can only be "hash" if "type = in-memory", or "jdbm","berkeleyJE" if "type = on-disc"
								- default and HIGHLY RECOMMENDED "on-disc" implementation is "jdbm"
	
	- "tempDictionary.cache":	- amount of memory for the dictionary cache, specified as <number><|K|k|M|m|G|g>
								- if not specified or set to "auto" it will be calculated based on a lot of hdtcfg parameters - RECOMMENDED!
								- generally speaking, this application doesn't need a big cache (JDBM especially!) so if memory is critical
								a small absolute amount can be specified here and could give results
								
4) Parameters of the temporary triples:

	- "tempTriples.type":	- can be "on-disc" or "in-memory", if neither or not set "in-memory" "list" implementation will be used
	
	- "tempTriples.impl":	- can be "list","set" if "type = in-memory", or "jdbm","berkeleyJE" if "type = on-disc"
							- default and HIGHLY RECOMMENDED "on-disc" implementation is "jdbm"
							- "in-memory" "set" is DEPRECATED, because takes more memory and time than "list"
	
	- "tempTriples.cache":	- amount of memory for the triples cache, specified as <number><|K|k|M|m|G|g>
							- if not specified or set to "auto" it will be calculated based on a lot of hdtcfg parameters - RECOMMENDED!
							- generally speaking, this application doesn't need a big cache (JDBM especially!) so if memory is critical
							a small absolute amount can be specified here and could give results